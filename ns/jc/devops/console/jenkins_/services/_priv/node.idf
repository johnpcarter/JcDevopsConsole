<?xml version="1.0" encoding="UTF-8"?>

<Values version="2.0">
  <value name="encodeutf8">true</value>
  <value name="shared">CnByaXZhdGUgc3RhdGljIFN0cmluZyBmaW5kQVBJRW50cnlQb2ludChJRGF0YVtdIHNlcnZpY2Vz
KSB7CgkKCVN0cmluZyBlbmRQb2ludCA9IG51bGw7CgkKCWZvciAoaW50IGkgPSAwOyBpIDwgc2Vy
dmljZXMubGVuZ3RoOyBpKyspIHsKCQkJCQoJCUlEYXRhQ3Vyc29yIHNlcnZpY2VzQ3Vyc29yID0g
c2VydmljZXNbaV0uZ2V0Q3Vyc29yKCk7CgkJSURhdGFbXQljb250YWluZXJzID0gSURhdGFVdGls
LmdldElEYXRhQXJyYXkoc2VydmljZXNDdXJzb3IsICJjb250YWluZXJzIik7CgkJCgkJaWYgKCBj
b250YWluZXJzICE9IG51bGwpIHsKCQoJCQlmb3IgKCBpbnQgeiA9IDA7IHogPCBjb250YWluZXJz
Lmxlbmd0aDsgeisrICkgewoJCQkKCQkJCUlEYXRhQ3Vyc29yIGNvbnRhaW5lcnNDdXJzb3IgPSBj
b250YWluZXJzW3pdLmdldEN1cnNvcigpOwoJCQkJU3RyaW5nIG5hbWUgPSBJRGF0YVV0aWwuZ2V0
U3RyaW5nKGNvbnRhaW5lcnNDdXJzb3IsICJuYW1lIik7CgkJCQlTdHJpbmcgdHlwZSA9IElEYXRh
VXRpbC5nZXRTdHJpbmcoY29udGFpbmVyc0N1cnNvciwgInR5cGUiKTsKCQkJCVN0cmluZyBhY3Rp
dmUgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKGNvbnRhaW5lcnNDdXJzb3IsICJhY3RpdmUiKTsKCQkJ
CQoJCQkJSURhdGEgcG9ydHMgPSBJRGF0YVV0aWwuZ2V0SURhdGFBcnJheShjb250YWluZXJzQ3Vy
c29yLCAicG9ydHMiKVswXTsKCQkJCUlEYXRhQ3Vyc29yIHBvcnRzQ3Vyc29yID0gcG9ydHMuZ2V0
Q3Vyc29yKCk7CgkJCQlTdHJpbmcJZXh0ZXJuYWwgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBwb3J0
c0N1cnNvciwgImV4dGVybmFsIiApOwoJCQkJU3RyaW5nCXB1YmxpY1BvcnQgPSBJRGF0YVV0aWwu
Z2V0U3RyaW5nKCBwb3J0c0N1cnNvciwgInB1YmxpY1BvcnQiICk7CgkJCQlTdHJpbmcJcG9ydE5h
bWUgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBwb3J0c0N1cnNvciwgIm5hbWUiICk7CgkJCQlwb3J0
c0N1cnNvci5kZXN0cm95KCk7CgkJCQkKCQkJCWlmICh0eXBlLmVxdWFscygiTWljcm9HYXRld2F5
IikpCgkJCQkJZW5kUG9pbnQgPSBuYW1lICsgIjoiICsgcHVibGljUG9ydDsKCQkJCWVsc2UgaWYg
KG5hbWUuY29udGFpbnMoIkFQSSBHYXRld2F5IikgJiYgZW5kUG9pbnQgIT0gbnVsbCkKCQkJCQll
bmRQb2ludCA9IG5hbWUgKyAiOiIgKyBwdWJsaWNQb3J0OwoJCQkJCgkJCQljb250YWluZXJzQ3Vy
c29yLmRlc3Ryb3koKTsKCQkJfQoJCX0KCQoJCXNlcnZpY2VzQ3Vyc29yLmRlc3Ryb3koKTsKCX0K
CQoJcmV0dXJuIGVuZFBvaW50Owp9Cgpwcml2YXRlIHN0YXRpYyBTdHJpbmcgbWFrZVJlZkZvckNv
bnRhaW5lcihBcnJheUxpc3Q8SURhdGE+IG91dCwgU3RyaW5nIHN0YWdlTmFtZSwgU3RyaW5nIHNl
cnZlciwgSURhdGEgY29udGFpbmVyKSB7CgkKCUlEYXRhQ3Vyc29yIGNvbnRhaW5lckN1cnNvciA9
IGNvbnRhaW5lci5nZXRDdXJzb3IoKTsKCVN0cmluZyBjb250YWluZXJOYW1lID0gSURhdGFVdGls
LmdldFN0cmluZyhjb250YWluZXJDdXJzb3IsICJuYW1lIik7CglTdHJpbmcgaG9zdE5hbWUgPSBJ
RGF0YVV0aWwuZ2V0U3RyaW5nKGNvbnRhaW5lckN1cnNvciwgImhvc3RuYW1lIik7CglTdHJpbmcg
dHlwZSA9IElEYXRhVXRpbC5nZXRTdHJpbmcoY29udGFpbmVyQ3Vyc29yLCAidHlwZSIpOwoJU3Ry
aW5nIGlzQWN0aXZlID0gSURhdGFVdGlsLmdldFN0cmluZyhjb250YWluZXJDdXJzb3IsICJhY3Rp
dmUiKTsKCQoJY29udGFpbmVyTmFtZSA9IGNvbnRhaW5lck5hbWUucmVwbGFjZUFsbCgiLSIsICJf
Iik7CgkJCQoJSURhdGFVdGlsLnB1dChjb250YWluZXJDdXJzb3IsICJuYW1lIiwgY29udGFpbmVy
TmFtZSk7CgkKCWNvbnRhaW5lckN1cnNvci5kZXN0cm95KCk7CgkKCVN5c3RlbS5vdXQucHJpbnRs
bigicHJlcCBjb250YWluZXIgIiArIGNvbnRhaW5lck5hbWUgKyAiIGlzIGFjdGl2ZSAiICsgaXNB
Y3RpdmUgKyAiIG9yICIgKyBob3N0TmFtZSk7CgkKCWlmICgoaXNBY3RpdmUgIT0gbnVsbCAmJiBp
c0FjdGl2ZS5lcXVhbHNJZ25vcmVDYXNlKCJ0cnVlIikpIHx8IGhvc3ROYW1lICE9IG51bGwpIHsK
CQoJCQlpZiAoaXNBY3RpdmUgIT0gbnVsbCAmJiBpc0FjdGl2ZS5lcXVhbHNJZ25vcmVDYXNlKCJ0
cnVlIikpIHsKCQkJCW91dC5hZGQobWFrZUFyZyhzdGFnZU5hbWUsIGNvbnRhaW5lck5hbWUsICJo
dHRwOi8vIiAgKyBzZXJ2ZXIgKyAiOiIgKyBnZXRQdWJsaWNQb3J0RnJvbUNvbnRhaW5lcihjb250
YWluZXIpLCBudWxsKSk7CgkJCX0gICBlbHNlIHsKCQkJCW91dC5hZGQobWFrZUFyZyhzdGFnZU5h
bWUsIGNvbnRhaW5lck5hbWUsICJodHRwOi8vIiArIGhvc3ROYW1lICsgIjoiICsgZ2V0UHVibGlj
UG9ydEZyb21Db250YWluZXIoY29udGFpbmVyKSwgbnVsbCkpOwoJCQl9CgkJCQoJCQlvdXQuYWRk
KG1ha2VBcmcoc3RhZ2VOYW1lLCBjb250YWluZXJOYW1lLCB0eXBlLnJlcGxhY2UoIiAiLCAiLSIp
LnRvTG93ZXJDYXNlKCksICJBVVRIIikpOwoJfQoJCglpZiAoaXNBY3RpdmUgIT0gbnVsbCAmJiBp
c0FjdGl2ZS5lcXVhbHNJZ25vcmVDYXNlKCJ0cnVlIikpIAoJCXJldHVybiBjb250YWluZXJOYW1l
OwoJZWxzZQoJCXJldHVybiBudWxsOwp9Cgpwcml2YXRlIHN0YXRpYyBJRGF0YSBtYWtlQXJnKFN0
cmluZyBwcmVmaXgsIFN0cmluZyBpZCwgU3RyaW5nIHZhbHVlLCBTdHJpbmcgcG9zdGZpeCkgewoK
CUlEYXRhIGFyZyA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCUlEYXRhQ3Vyc29yIGMgPSBhcmcu
Z2V0Q3Vyc29yKCk7CgkKCWlmIChwb3N0Zml4ICE9IG51bGwpCgkJSURhdGFVdGlsLnB1dChjLCAi
c3JjIiwgcHJlZml4LnJlcGxhY2VBbGwoIj0iLCJfIikgKyAiXyIgKyBpZC5yZXBsYWNlQWxsKCI9
IiwiXyIpICsgIl8iICsgcG9zdGZpeC5yZXBsYWNlQWxsKCI9IiwiXyIpKTsKCWVsc2UKCQlJRGF0
YVV0aWwucHV0KGMsICJzcmMiLCBwcmVmaXgucmVwbGFjZUFsbCgiPSIsIl8iKSArICJfIiArIGlk
LnJlcGxhY2VBbGwoIj0iLCJfIikpOwoJCglJRGF0YVV0aWwucHV0KGMsICJ0Z3QiLCB2YWx1ZSk7
CgkKCWMuZGVzdHJveSgpOwoJCglyZXR1cm4gYXJnOwp9Cgpwcml2YXRlIHN0YXRpYyBTdHJpbmcg
Z2V0UHVibGljUG9ydEZyb21Db250YWluZXIoSURhdGEgY29udGFpbmVyKSB7CgoJSURhdGFDdXJz
b3IgYyA9IGNvbnRhaW5lci5nZXRDdXJzb3IoKTsKCUlEYXRhW10gcG9ydHMgPSBJRGF0YVV0aWwu
Z2V0SURhdGFBcnJheShjLCAicG9ydHMiKTsKCWMuZGVzdHJveSgpOwoJCgljID0gcG9ydHNbMF0u
Z2V0Q3Vyc29yKCk7CglTdHJpbmcgZXh0ID0gSURhdGFVdGlsLmdldFN0cmluZyhjLCAiZXh0ZXJu
YWwiKTsKCVN0cmluZyBwdWJsaWNQb3J0ID0gSURhdGFVdGlsLmdldFN0cmluZyhjLCAicHVibGlj
UG9ydCIpOwoJCgljLmRlc3Ryb3koKTsKCQoJcmV0dXJuIGV4dDsKfQoKcHJpdmF0ZSBzdGF0aWMg
SURhdGFbXSBhZGRTdGVwVG9TdGVwcyhTdHJpbmcgbmFtZSwgU3RyaW5nIHdoZW4sIFN0cmluZyBz
dGVwRGV0YWlsLCBJRGF0YVtdIHN0ZXBzKSB7CgoJTWFwPFN0cmluZywgSURhdGE+IHN0ZXBzeiA9
IGNvbnZlcnRUb01hcChzdGVwcyk7CgkKCUlEYXRhIHN0ZXAgPSBudWxsOwoJCglpZiAoKHN0ZXA9
c3RlcHN6LmdldChuYW1lKSkgIT0gbnVsbCkgewoJCWFkZFN0ZXBUb1N0ZXAoc3RlcCwgc3RlcERl
dGFpbCk7Cgl9IGVsc2UgewoJCXN0ZXBzID0gYWRkU3RlcFRvTGlzdChuYW1lLCB3aGVuLCBzdGVw
RGV0YWlsLCBzdGVwcyk7Cgl9CgkKCXJldHVybiBzdGVwczsKfQoKcHJpdmF0ZSBzdGF0aWMgTWFw
PFN0cmluZywgSURhdGE+IGNvbnZlcnRUb01hcChJRGF0YVtdIHN0ZXBzKSB7CgoJTWFwPFN0cmlu
ZywgSURhdGE+IG91dCA9IG5ldyBIYXNoTWFwPFN0cmluZywgSURhdGE+KCk7CgkKCWlmIChzdGVw
cyAhPSBudWxsKSB7CgkJZm9yICggaW50IGkgPSAwOyBpIDwgc3RlcHMubGVuZ3RoOyBpKysgKQoJ
CXsKCQkJSURhdGFDdXJzb3Igc3RlcHNDdXJzb3IgPSBzdGVwc1tpXS5nZXRDdXJzb3IoKTsKCQkJ
U3RyaW5nCW5hbWUgPSBJRGF0YVV0aWwuZ2V0U3RyaW5nKCBzdGVwc0N1cnNvciwgIm5hbWUiKTsK
CQkJc3RlcHNDdXJzb3IuZGVzdHJveSgpOwoJCQoJCQlvdXQucHV0KG5hbWUsIHN0ZXBzW2ldKTsK
CQl9Cgl9CgkKCXJldHVybiBvdXQ7Cn0KCnByaXZhdGUgc3RhdGljIElEYXRhW10gYWRkU3RlcFRv
TGlzdChTdHJpbmcgbmFtZSwgU3RyaW5nIHdoZW4sIFN0cmluZyBkZXRhaWwsIElEYXRhW10gc3Rl
cHMpIHsKCQoJaWYgKHN0ZXBzICE9IG51bGwpIHsKCQlJRGF0YSBvdXRbXSA9IG5ldyBJRGF0YVtz
dGVwcy5sZW5ndGgrMV07CgkKCQlmb3IgIChpbnQgaSA9IDA7IGkgPCBzdGVwcy5sZW5ndGg7IGkr
KykgewoJCQlvdXRbaV0gPSBzdGVwc1tpXTsKCQl9CgkKCQlvdXRbc3RlcHMubGVuZ3RoXSA9IG1h
a2VTdGVwKG5hbWUsIHdoZW4sIGRldGFpbCk7CgkJCgkJcmV0dXJuIG91dDsKCgl9IGVsc2UgewoJ
CQoJCUlEYXRhIG91dFtdID0gbmV3IElEYXRhWzFdOwoJCW91dFswXSA9IG1ha2VTdGVwKG5hbWUs
IHdoZW4sIGRldGFpbCk7CgkJCgkJcmV0dXJuIG91dDsKCX0KCQp9Cgpwcml2YXRlIHN0YXRpYyBJ
RGF0YSBtYWtlU3RlcChTdHJpbmcgbmFtZSwgU3RyaW5nIHdoZW4sIFN0cmluZyBkZXRhaWwpIHsK
CQoJSURhdGEgc3RlcCA9IElEYXRhRmFjdG9yeS5jcmVhdGUoKTsKCUlEYXRhQ3Vyc29yIGMgPSBz
dGVwLmdldEN1cnNvcigpOwoJSURhdGFVdGlsLnB1dChjLCAibmFtZSIsIG5hbWUpOwoJCglpZiAo
d2hlbiAhPSBudWxsKQoJCUlEYXRhVXRpbC5wdXQoYywgICJ3aGVuIiwgd2hlbik7CgkKCVN0cmlu
Z1tdIGRldGFpbHMgPSBuZXcgU3RyaW5nWzFdOwoJZGV0YWlsc1swXSA9IGRldGFpbDsKCQoJSURh
dGFVdGlsLnB1dChjLCAic3RlcHMiLCBkZXRhaWxzKTsKCWMuZGVzdHJveSgpOwoJCglyZXR1cm4g
c3RlcDsKfQoKcHJpdmF0ZSBzdGF0aWMgdm9pZCBhZGRTdGVwVG9TdGVwKElEYXRhIHN0ZXAsIFN0
cmluZyBkZXRhaWwpICB7CgkKCUlEYXRhQ3Vyc29yIHN0ZXBzQ3Vyc29yID0gc3RlcC5nZXRDdXJz
b3IoKTsKCUFycmF5TGlzdDxTdHJpbmc+IHN0ZXBzID0gY29udmVydFRvU3RyaW5nTGlzdChJRGF0
YVV0aWwuZ2V0U3RyaW5nQXJyYXkoc3RlcHNDdXJzb3IsICJzdGVwcyIpKTsKCQoJCglpZiAoc3Rl
cHMuc2l6ZSgpID4gMiAmJiAgc3RlcHMuZ2V0KDApLnN0YXJ0c1dpdGgoInNjcmlwdCB7IikpIHsK
CQlzdGVwcy5hZGQoc3RlcHMuc2l6ZSgpLTEsIGRldGFpbCk7CgkJCgkJU3lzdGVtLm91dC5wcmlu
dGxuKCJkZXRhaWx6eiB3aWxsIGJlICIgKyBkZXRhaWwpOwoJfSBlbHNlIHsKCQkKCQlpZiAoc3Rl
cHMuZ2V0KDApLnN0YXJ0c1dpdGgoInNjcmlwdCB7IikpIHsKCQkJCgkJCS8vIHJlbW92ZSBzY3Jp
cHQgd3JhcHBlciBmcm9tIHN0cmluZwoJCQkKCQkJU3RyaW5nIHNjcmlwdCA9IHN0ZXBzLmdldCgw
KTsKCQkJaW50IHN0cnQgPSBzY3JpcHQuaW5kZXhPZigieyIpOwoJCQlpbnQgZW5kID0gc2NyaXB0
Lmxhc3RJbmRleE9mKCJ9Iik7CgkJCQoJCQlzdGVwcy5jbGVhcigpOwoJCQkKCQkJU3lzdGVtLm91
dC5wcmludGxuKCIgc3RlcCB3YXMgIiArIHNjcmlwdCk7CgkJCVN5c3RlbS5vdXQucHJpbnRsbigi
IHN0ZXAgd2lsbCBiZSAiICsgc2NyaXB0LnN1YnN0cmluZyhzdHJ0KzEsIGVuZC0xKSk7CgkJCQoJ
CQlzdGVwcy5hZGQoc2NyaXB0LnN1YnN0cmluZyhzdHJ0KzEsIGVuZC0xKSk7CgkJfQoJCQoJCVN5
c3RlbS5vdXQucHJpbnRsbigiZGV0YWlsIHdpbGwgYmUgIiArIGRldGFpbCk7CgkJCgkJc3RlcHMu
YWRkKDAsICJzY3JpcHQgeyIpOwoJCXN0ZXBzLmFkZChkZXRhaWwpOwoJCXN0ZXBzLmFkZCgifSIp
OwoJfQoJCglJRGF0YVV0aWwucHV0KHN0ZXBzQ3Vyc29yLCAic3RlcHMiLCBzdGVwcy50b0FycmF5
KG5ldyBTdHJpbmdbc3RlcHMuc2l6ZSgpXSkpOwoJc3RlcHNDdXJzb3IuZGVzdHJveSgpOwp9Cgpw
cml2YXRlIHN0YXRpYyBBcnJheUxpc3Q8SURhdGE+IGNvbnZlcnRUb0lEYXRhTGlzdChJRGF0YVtd
IGluKSB7CgkKCUFycmF5TGlzdDxJRGF0YT4gb3V0ID0gbmV3ICBBcnJheUxpc3Q8SURhdGE+KCk7
CgkKCWZvciAoaW50IGkgPSAwOyBpIDwgaW4ubGVuZ3RoOyBpKyspIHsKCQlvdXQuYWRkKHJlcGxh
Y2VTbGFzaChpbltpXSkpOwoJfQoJCglyZXR1cm4gb3V0Owp9Cgpwcml2YXRlIHN0YXRpYyBJRGF0
YSByZXBsYWNlU2xhc2goSURhdGEgaW4pIHsKCglJRGF0YUN1cnNvciBjID0gaW4uZ2V0Q3Vyc29y
KCk7CglJRGF0YVV0aWwucHV0KGMsICJzcmMiLCBJRGF0YVV0aWwuZ2V0U3RyaW5nKGMsICJzcmMi
KS5yZXBsYWNlQWxsKCItKD89W15cXFtcXF1dKlxcXSkiLCAiXyIpKTsKCWMuZGVzdHJveSgpOwoJ
CglyZXR1cm4gaW47Cn0KCnByaXZhdGUgc3RhdGljIEFycmF5TGlzdDxTdHJpbmc+IGNvbnZlcnRU
b1N0cmluZ0xpc3QoU3RyaW5nW10gaW4pIHsKCQoJQXJyYXlMaXN0PFN0cmluZz4gb3V0ID0gbmV3
ICBBcnJheUxpc3Q8U3RyaW5nPigpOwoJCglmb3IgKGludCBpID0gMDsgaSA8IGluLmxlbmd0aDsg
aSsrKSB7CgkJb3V0LmFkZChpbltpXSk7Cgl9CgkKCXJldHVybiBvdXQ7Cn0KCnByaXZhdGUgc3Rh
dGljIElEYXRhIG1ha2VFbnYoU3RyaW5nIG5hbWUsIFN0cmluZyB2YWx1ZSkgewoJCglJRGF0YSBl
bnYgPSBJRGF0YUZhY3RvcnkuY3JlYXRlKCk7CgkKCUlEYXRhQ3Vyc29yIGMgPSBlbnYuZ2V0Q3Vy
c29yKCk7CglJRGF0YVV0aWwucHV0KGMsIG5hbWUucmVwbGFjZUFsbCgiLSIsICJfIiksIHZhbHVl
KTsKCWMuZGVzdHJveSgpOwoJCglyZXR1cm4gZW52Owp9</value>
  <value name="extends"></value>
  <array name="implements" type="value" depth="1">
  </array>
  <array name="imports" type="value" depth="1">
    <value>java.util.ArrayList</value>
    <value>java.util.HashMap</value>
    <value>java.util.List</value>
    <value>java.util.Map</value>
  </array>
</Values>
